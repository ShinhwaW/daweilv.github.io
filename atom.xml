<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>David 的个人博客 ๛ก(ｰ̀ωｰ́ก)</title>
  
  <subtitle>挖个坑，埋个土，数个一二三四五 ヾ(･ε･｀*)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dawei.lv/"/>
  <updated>2018-07-23T05:37:17.754Z</updated>
  <id>http://dawei.lv/</id>
  
  <author>
    <name>David</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Babel 插件开发入门教程</title>
    <link href="http://dawei.lv/2018/07/21/babel-%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://dawei.lv/2018/07/21/babel-插件开发入门教程/</id>
    <published>2018-07-21T12:39:23.000Z</published>
    <updated>2018-07-23T05:37:17.754Z</updated>
    
    <content type="html"><![CDATA[<p>目前主流的前端框架在开发的时候都采用最新的 ES6+ 语法，大部分的向下兼容工作都交给了 Babel 来处理。通过引入 Babel 插件，我们可以大胆地使用最新或是正在起草中，甚至是根本不在标准中的 jsx 等语法，跟甚至是你自己胡诌的写法！</p><p>本文将带大家了解 Babel 是怎么工作的、Babel 插件是怎么工作又是怎么编写的，并写一个与 webpack 集成的最简单的 Babel 插件。</p><a id="more"></a><h3 id="Babel-是怎么工作的"><a href="#Babel-是怎么工作的" class="headerlink" title="Babel 是怎么工作的"></a>Babel 是怎么工作的</h3><p>Babel 是一个 JavaScript 编译器。Babel 通过读取源代码，生成抽象语法树（AST），根据插件对 AST 上对应的节点进行修改，修改完毕后根据新的 AST 输出新的代码。</p><p><code>@babel/parse</code> 原名 <code>babylon</code>，Babel 的<code>解析器</code>，用于读取源代码，生成 AST。</p><p>来看看 <code>import React from &quot;react&quot;;</code> 转换成 AST 后的结构：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"Program"</span>,</span><br><span class="line">  <span class="attr">"start"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"end"</span>: <span class="number">26</span>,</span><br><span class="line">  <span class="attr">"body"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"ImportDeclaration"</span>,</span><br><span class="line">      <span class="attr">"start"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end"</span>: <span class="number">26</span>,</span><br><span class="line">      <span class="attr">"specifiers"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"ImportDefaultSpecifier"</span>,</span><br><span class="line">          <span class="attr">"start"</span>: <span class="number">7</span>,</span><br><span class="line">          <span class="attr">"end"</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">"local"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">            <span class="attr">"start"</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="attr">"end"</span>: <span class="number">12</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"React"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"source"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">        <span class="attr">"start"</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">"end"</span>: <span class="number">25</span>,</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"react"</span>,</span><br><span class="line">        <span class="attr">"raw"</span>: <span class="string">"\"react\""</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"sourceType"</span>: <span class="string">"module"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@babel/traverse</code>，Babel 的<code>遍历器</code>，用于维护 AST 的状态，并且负责替换、移除和添加节点。<br><code>@babel/types</code>，Babel 的 helper <code>工具集</code>，包含了构造、验证以及变换 AST 节点的方法。</p><h3 id="Babel-插件又是怎么工作的"><a href="#Babel-插件又是怎么工作的" class="headerlink" title="Babel 插件又是怎么工作的"></a>Babel 插件又是怎么工作的</h3><p>Babel 为插件提供了访客模式，可以轻松的访问对应类型的 AST 节点，进行修改。先看一个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir babel-demo &amp;&amp; <span class="built_in">cd</span> babel-demo</span><br><span class="line"></span><br><span class="line">npm i -D @babel/core @babel/types</span><br><span class="line"></span><br><span class="line">touch index.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">"@babel/core"</span>);</span><br><span class="line"><span class="keyword">const</span> code = <span class="string">'import React from "react";'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">  <span class="comment">// 我们要修改的节点是 import 声明节点。</span></span><br><span class="line">  ImportDeclaration(path) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(path.parent.type);</span><br><span class="line">    <span class="built_in">console</span>.log(path.node.type);</span><br><span class="line">    <span class="built_in">console</span>.log(path.node.specifiers[<span class="number">0</span>].local.name);</span><br><span class="line">    <span class="built_in">console</span>.log(path.node.source.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">babel.transform(code, &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123;</span><br><span class="line">      visitor</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>可以看到 path 的结构是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"parent"</span>: &#123; <span class="attr">"type"</span>: <span class="string">"Program"</span> &#125;,</span><br><span class="line">  <span class="attr">"node"</span>: &#123; <span class="attr">"type"</span>: <span class="string">"ImportDeclaration"</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 node 节点可以访问到当前节点。</p><p>有同学要问了，我怎么知道我当前要修改的东西是什么类型呢？？</p><p>先把对应的代码片段贴到 <a href="https://astexplorer.net/" target="_blank" rel="noopener">astexplorer</a>，看到该语句是一个 <code>ImportDeclaration</code>，然后到 <a href="https://github.com/babel/babel/blob/master/packages/babel-parser/ast/spec.md" target="_blank" rel="noopener">Babel Spec</a> 查询这个语句的细节文档（这是 Babel 基于 <a href="https://github.com/estree/estree" target="_blank" rel="noopener">ESTree Spec</a> 做的修改版）。</p><p>我们要现在把 <code>import React from &quot;react&quot;;</code> 修改成 <code>import React from &quot;vue&quot;;</code>，来看看怎么实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">"@babel/core"</span>);</span><br><span class="line"><span class="keyword">const</span> code = <span class="string">'import React from "react";'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">  ImportDeclaration(path) &#123;</span><br><span class="line">    path.node.source.value = <span class="string">"vue"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = babel.transform(code, &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123;</span><br><span class="line">      visitor</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res.code);</span><br><span class="line"><span class="comment">// import React from "vue";</span></span><br></pre></td></tr></table></figure><h3 id="Babel-插件是怎么写的"><a href="#Babel-插件是怎么写的" class="headerlink" title="Babel 插件是怎么写的"></a>Babel 插件是怎么写的</h3><p>来看看我们写的插件如何集成到 webpack 里，毕竟我们是要拿来用的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// .babelrc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [[<span class="string">"@babel/preset-env"</span>]],</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"myplugin"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Babel 插件的命名方式为 <code>babel-plugin-${your-plugin-name}</code>。npm 打包发布方法可参考 <a href="/2018/06/08/webpack-打包组件库并发布到-npm/">使用 Webpack4.0 打包组件库并发布到 npm</a> 这篇文章，这里为了方便，直接在 node_modules 下写了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// node_modules/babel-plugin-myplugin/index.js</span><br><span class="line">module.exports = function() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    visitor: &#123;</span><br><span class="line">      ImportDeclaration(path) &#123;</span><br><span class="line">        path.node.source.value = &quot;./moduleB&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// src/index.js</span><br><span class="line">import module from &quot;moduleA&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// src/moduleB.js</span><br><span class="line">export default () =&gt; &#123;</span><br><span class="line">  console.log(&quot;B&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dist/main.js</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// webpackBootstrap</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="comment">// The module cache</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="keyword">var</span> installedModules = &#123;&#125;; <span class="comment">// The require function</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="comment">/******/</span> <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">    <span class="comment">/******/</span> <span class="comment">// Check if module is in cache</span></span><br><span class="line">    <span class="comment">/******/</span> <span class="keyword">if</span> (installedModules[moduleId]) &#123;</span><br><span class="line">      <span class="comment">/******/</span> <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line">      <span class="comment">/******/</span></span><br><span class="line">    &#125; <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line">    <span class="comment">/******/</span> <span class="comment">/******/</span> <span class="keyword">var</span> <span class="built_in">module</span> = (installedModules[moduleId] = &#123;</span><br><span class="line">      <span class="comment">/******/</span> i: moduleId,</span><br><span class="line">      <span class="comment">/******/</span> l: <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">/******/</span> exports: &#123;&#125;</span><br><span class="line">      <span class="comment">/******/</span></span><br><span class="line">    &#125;); <span class="comment">// Execute the module function</span></span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">    <span class="comment">/******/</span> <span class="comment">/******/</span> modules[moduleId].call(</span><br><span class="line">      <span class="built_in">module</span>.exports,</span><br><span class="line">      <span class="built_in">module</span>,</span><br><span class="line">      <span class="built_in">module</span>.exports,</span><br><span class="line">      __webpack_require__</span><br><span class="line">    ); <span class="comment">// Flag the module as loaded</span></span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">    <span class="comment">/******/</span> <span class="comment">/******/</span> <span class="built_in">module</span>.l = <span class="literal">true</span>; <span class="comment">// Return the exports of the module</span></span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">    <span class="comment">/******/</span> <span class="comment">/******/</span> <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">  &#125; <span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="comment">/******/</span> __webpack_require__.m = modules; <span class="comment">// expose the module cache</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="comment">/******/</span> __webpack_require__.c = installedModules; <span class="comment">// define getter function for harmony exports</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="comment">/******/</span> __webpack_require__.d = <span class="function"><span class="keyword">function</span>(<span class="params">exports, name, getter</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/******/</span> <span class="keyword">if</span> (!__webpack_require__.o(exports, name)) &#123;</span><br><span class="line">      <span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(exports, name, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        get: getter</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">/******/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">  &#125;; <span class="comment">// define __esModule on exports</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="comment">/******/</span> __webpack_require__.r = <span class="function"><span class="keyword">function</span>(<span class="params">exports</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/******/</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">      <span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">        value: <span class="string">"Module"</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">/******/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">  &#125;; <span class="comment">// create a fake namespace object // mode &amp; 1: value is a module id, require it // mode &amp; 2: merge all properties of value into the ns // mode &amp; 4: return value when already ns object // mode &amp; 8|1: behave like require</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="comment">/******/</span> <span class="comment">/******/</span> <span class="comment">/******/</span> <span class="comment">/******/</span> <span class="comment">/******/</span> __webpack_require__.t = <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    value,</span></span></span><br><span class="line"><span class="function"><span class="params">    mode</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="comment">/******/</span> <span class="keyword">if</span> (mode &amp; <span class="number">1</span>) value = __webpack_require__(value);</span><br><span class="line">    <span class="comment">/******/</span> <span class="keyword">if</span> (mode &amp; <span class="number">8</span>) <span class="keyword">return</span> value;</span><br><span class="line">    <span class="comment">/******/</span> <span class="keyword">if</span> (</span><br><span class="line">      mode &amp; <span class="number">4</span> &amp;&amp;</span><br><span class="line">      <span class="keyword">typeof</span> value === <span class="string">"object"</span> &amp;&amp;</span><br><span class="line">      value &amp;&amp;</span><br><span class="line">      value.__esModule</span><br><span class="line">    )</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    <span class="comment">/******/</span> <span class="keyword">var</span> ns = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">/******/</span> __webpack_require__.r(ns);</span><br><span class="line">    <span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(ns, <span class="string">"default"</span>, &#123;</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      value: value</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/******/</span> <span class="keyword">if</span> (mode &amp; <span class="number">2</span> &amp;&amp; <span class="keyword">typeof</span> value != <span class="string">"string"</span>)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> value)</span><br><span class="line">        __webpack_require__.d(</span><br><span class="line">          ns,</span><br><span class="line">          key,</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value[key];</span><br><span class="line">          &#125;.bind(<span class="literal">null</span>, key)</span><br><span class="line">        );</span><br><span class="line">    <span class="comment">/******/</span> <span class="keyword">return</span> ns;</span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">  &#125;; <span class="comment">// getDefaultExport function for compatibility with non-harmony modules</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="comment">/******/</span> __webpack_require__.n = <span class="function"><span class="keyword">function</span>(<span class="params">module</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/******/</span> <span class="keyword">var</span> getter =</span><br><span class="line">      <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule</span><br><span class="line">        ? <span class="comment">/******/</span> <span class="function"><span class="keyword">function</span> <span class="title">getDefault</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">module</span>[<span class="string">"default"</span>];</span><br><span class="line">          &#125;</span><br><span class="line">        : <span class="comment">/******/</span> <span class="function"><span class="keyword">function</span> <span class="title">getModuleExports</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">module</span>;</span><br><span class="line">          &#125;;</span><br><span class="line">    <span class="comment">/******/</span> __webpack_require__.d(getter, <span class="string">"a"</span>, getter);</span><br><span class="line">    <span class="comment">/******/</span> <span class="keyword">return</span> getter;</span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">  &#125;; <span class="comment">// Object.prototype.hasOwnProperty.call</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="comment">/******/</span> __webpack_require__.o = <span class="function"><span class="keyword">function</span>(<span class="params">object, property</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, property);</span><br><span class="line">  &#125;; <span class="comment">// __webpack_public_path__</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="comment">/******/</span> __webpack_require__.p = <span class="string">""</span>; <span class="comment">// Load entry module and return exports</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="comment">/******/</span> <span class="keyword">return</span> __webpack_require__(</span><br><span class="line">    (__webpack_require__.s = <span class="string">"./src/index.js"</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">&#125;)(</span><br><span class="line">  <span class="comment">/************************************************************************/</span></span><br><span class="line">  <span class="comment">/******/</span> &#123;</span><br><span class="line">    <span class="comment">/***/</span> <span class="string">"./src/index.js"</span>:</span><br><span class="line">      <span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line">      <span class="comment">/*! no static exports found */</span></span><br><span class="line">      <span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="meta">        "use strict"</span>;</span><br><span class="line">        <span class="built_in">eval</span>(</span><br><span class="line">          <span class="string">'\n\nvar _moduleB = _interopRequireDefault(__webpack_require__(/*! ./moduleB */ "./src/moduleB.js"));\n\nfunction _interopRequireDefault(obj) &#123; return obj &amp;&amp; obj.__esModule ? obj : &#123; default: obj &#125;; &#125;\n\n//# sourceURL=webpack:///./src/index.js?'</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">/***/</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***/</span> <span class="string">"./src/moduleB.js"</span>:</span><br><span class="line">      <span class="comment">/*!************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/moduleB.js ***!</span></span><br><span class="line"><span class="comment">  \************************/</span></span><br><span class="line">      <span class="comment">/*! no static exports found */</span></span><br><span class="line">      <span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="meta">        "use strict"</span>;</span><br><span class="line">        <span class="built_in">eval</span>(</span><br><span class="line">          <span class="string">'\n\nObject.defineProperty(exports, "__esModule", &#123;\n  value: true\n&#125;);\nexports.default = void 0;\n\nvar _default = function _default() &#123;\n  console.log("B");\n&#125;;\n\nexports.default = _default;\n\n//# sourceURL=webpack:///./src/moduleB.js?'</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">/***/</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>可以看到 moduleB 已经被打包进来了。</p><p>至此，我们最简单的 Babel 插件已经可以正常使用了。</p><p>感谢&amp;参考：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/27289600" target="_blank" rel="noopener">Babel 是如何读懂 JS 代码的</a></li><li><a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/README.md" target="_blank" rel="noopener">Babel Handbook</a></li><li><a href="https://github.com/babel/babel/blob/master/packages/babel-parser/ast/spec.md" target="_blank" rel="noopener">babel-parser/ast/spec.md</a></li><li><a href="http://www.alloyteam.com/2017/04/analysis-of-babel-babel-overview/" target="_blank" rel="noopener">剖析 Babel——Babel 总览</a></li><li><a href="https://octman.com/blog/2016-08-27-babel-notes/" target="_blank" rel="noopener">Babel 内部原理分析</a></li><li><a href="https://astexplorer.net/" target="_blank" rel="noopener">astexplorer</a></li><li><a href="https://juejin.im/post/5ab9f2f3f265da239b4174f0" target="_blank" rel="noopener">babel 插件入门-AST</a></li><li><a href="https://segmentfault.com/a/1190000013261724" target="_blank" rel="noopener">探索 babel 和 babel 插件是怎么工作的</a></li><li><a href="https://github.com/lcxfs1991/blog/issues/9" target="_blank" rel="noopener">babel 到底将代码转换成什么鸟样？</a></li><li><a href="https://juejin.im/entry/5af3a3f6518825670d731cea" target="_blank" rel="noopener">分析 Babel 转换 ES6 module 的原理</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前主流的前端框架在开发的时候都采用最新的 ES6+ 语法，大部分的向下兼容工作都交给了 Babel 来处理。通过引入 Babel 插件，我们可以大胆地使用最新或是正在起草中，甚至是根本不在标准中的 jsx 等语法，跟甚至是你自己胡诌的写法！&lt;/p&gt;
&lt;p&gt;本文将带大家了解 Babel 是怎么工作的、Babel 插件是怎么工作又是怎么编写的，并写一个与 webpack 集成的最简单的 Babel 插件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="babel" scheme="http://dawei.lv/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>基于媒体查询和 rem 的响应式布局实践</title>
    <link href="http://dawei.lv/2018/07/12/%E5%9F%BA%E4%BA%8E%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E5%92%8C-rem-%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E5%AE%9E%E8%B7%B5/"/>
    <id>http://dawei.lv/2018/07/12/基于媒体查询和-rem-的响应式布局实践/</id>
    <published>2018-07-12T08:06:01.000Z</published>
    <updated>2018-07-20T08:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="媒体查询-media"><a href="#媒体查询-media" class="headerlink" title="媒体查询 @media"></a>媒体查询 @media</h3><p>我们开发一个网站的时候希望在手机端、iPad 端、PC 端都有良好的体验，CSS 给我们提供了一个强大的条件判断语法，可以根据设备的宽度来设置不同的样式，从而实现不同的设备应用不同的布局。</p><p>下图展示了利用 <code>@media</code> 实现的同一页面手机端 2 列、iPad 端 3 列、PC 端 4 列的布局。</p><a id="more"></a><blockquote><p><img src="./layout.jpeg" alt="layout"></p></blockquote><p>下面我们来分析下如何实现上述 Demo。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">576px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33.333%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">1024px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们根据设备的宽度把设备分为三个区间，分别为：</p><ul><li><code>小于576px</code> 移动端区间</li><li><code>576px~1024px</code> 平板区间</li><li><code>大于1024px</code> PC 端区间</li></ul><p>默认样式针对移动端编写，减少匹配规则，加快移动端的解析。当设备宽度大于 576px 时，就匹配到了 <code>@media (min-width: 576px)</code>，此时 <code>width: 33.333%;</code> 会将原来的 <code>50%</code> 覆盖掉，显示为 3 列。当设备宽度大于 1024px 时，就匹配到了 <code>@media (min-width: 1024px)</code>，此时 <code>width: 25%;</code> 进一步覆盖掉原来的 <code>33.333%</code>，显示为 4 列。</p><p>通过合理的布局 DOM 结构，可以让不同设备的浏览效果完全不同。配合 <code>flex</code> 布局的 <code>order</code> 属性，DOM 间的位置交换变得更加简单。</p><h3 id="REM"><a href="#REM" class="headerlink" title="REM"></a>REM</h3><p>我们使用三个断点解决了不同端的布局问题，但这只是第一步。我们现在还是用的 px 做单位，设计师给我们出的 iPhone6 的设计稿，一个按钮 80px 宽度，iPhone6 上可以这么写。iPhone5s 空间不足导致换行、iPhone6 Plus 留白怎么办？这时候就要召唤出我们的大杀器 rem 了。</p><p>rem 是一个根据 html 根元素 font-size 计算的相对单位。<code>元素实际尺寸 = 元素 rem 值 x html 的 font-size 值</code>。也就是说当 html 的 font-size 设置为 50px 时，2rem 的元素实际尺寸就是 100px。</p><p>我司设计师通常使用 2 倍的 iPhone6 作为设计稿。iPhone6 设计稿的宽度为<code>750px</code>，对应实际尺寸<code>350px</code>。为了方便换算，我们将 html 的 font-size 设置为 <code>50px</code>，实际尺寸 <code>100px = 2rem</code>。而这 <code>2rem</code> 正好等于设计稿上的 <code>200</code> 向左移动两位小数点，换算起来非常方便。</p><blockquote><p>你说的我都懂，但这跟 5s、6p 适配有什么关系呢？？</p></blockquote><p>当然有关系啦，我们可以让 html 的 font-size 基于 iPhone6 等比例缩放，这样就能实现对 5s、6p 的适配。来看一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clientWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = (clientWidth / <span class="number">750</span>) * <span class="number">100</span> + <span class="string">"px"</span>;</span><br></pre></td></tr></table></figure><p>计算出当前设备的宽度基于 750 的尺寸，按比例换算成 px，实现不同尺寸的手机设置等比例的 html font-size。</p><p>我们看下实际效果图：</p><blockquote><p><img src="./layout2.jpeg" alt="layout2"></p></blockquote><h3 id="将-media-rem-结合起来"><a href="#将-media-rem-结合起来" class="headerlink" title="将 @media rem 结合起来"></a>将 @media rem 结合起来</h3><p>将之前讲的两点结合起来，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clientWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"><span class="keyword">if</span> (clientWidth &lt; <span class="number">575</span>) &#123;</span><br><span class="line">  <span class="built_in">document</span>.documentElement.style.fontSize = (clientWidth / <span class="number">750</span>) * <span class="number">100</span> + <span class="string">"px"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (clientWidth &lt; <span class="number">1024</span>) &#123;</span><br><span class="line">  <span class="comment">// 竖版 iPad 的 2x 尺寸</span></span><br><span class="line">  <span class="built_in">document</span>.documentElement.style.fontSize = (clientWidth / <span class="number">1536</span>) * <span class="number">100</span> + <span class="string">"px"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.documentElement.style.fontSize = <span class="string">"50px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终实现了：</p><ul><li><code>小于576px</code> 移动端区间，按 iPhone6 等比缩放，2 列布局</li><li><code>576px~1024px</code> 平板区间，按竖版 iPad 等比缩放，3 列布局</li><li><code>大于1024px</code> PC 端区间，不缩放。4 列布局</li></ul><p>总结，真实的项目中往往比这复杂的多，这个时候就需要把三端的设计稿拿过来仔细分析一下，哪些是可以抽象成一个 DOM 结构，清晰的 DOM 结构会让你的实现更加清晰。<br>附上本文的<a href="/demo/reponsive-layout">完整 Demo</a>，也就是一开始的截图。<br>另外更复杂的实现可以参考下我司官网 <a href="http://www.bstcine.com" target="_blank" rel="noopener">www.bstcine.com</a> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;媒体查询-media&quot;&gt;&lt;a href=&quot;#媒体查询-media&quot; class=&quot;headerlink&quot; title=&quot;媒体查询 @media&quot;&gt;&lt;/a&gt;媒体查询 @media&lt;/h3&gt;&lt;p&gt;我们开发一个网站的时候希望在手机端、iPad 端、PC 端都有良好的体验，CSS 给我们提供了一个强大的条件判断语法，可以根据设备的宽度来设置不同的样式，从而实现不同的设备应用不同的布局。&lt;/p&gt;
&lt;p&gt;下图展示了利用 &lt;code&gt;@media&lt;/code&gt; 实现的同一页面手机端 2 列、iPad 端 3 列、PC 端 4 列的布局。&lt;/p&gt;
    
    </summary>
    
    
      <category term="rem" scheme="http://dawei.lv/tags/rem/"/>
    
      <category term="css" scheme="http://dawei.lv/tags/css/"/>
    
      <category term="media-query" scheme="http://dawei.lv/tags/media-query/"/>
    
  </entry>
  
  <entry>
    <title>打开 Chrome 的隐藏功能</title>
    <link href="http://dawei.lv/2018/06/27/%E6%89%93%E5%BC%80-Chrome-%E7%9A%84%E9%9A%90%E8%97%8F%E5%8A%9F%E8%83%BD/"/>
    <id>http://dawei.lv/2018/06/27/打开-Chrome-的隐藏功能/</id>
    <published>2018-06-27T08:51:27.000Z</published>
    <updated>2018-07-20T08:16:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们有的时候想查看 Video/Audio 之类的原生控件里面有哪些 DOM 结构或者 CSS 是怎么写的，但是审核元素的时候却看不到里面的结构，那么有没有什么办法看到呢？Chrome 为我们提供了开关 Settings|Preferences -&gt; Elements -&gt; Show user agent shadow DOM，开启之后就能看到隐藏 DOM 了。</p><a id="more"></a><p><img src="settings1.jpeg" alt=""><br><img src="settings2.jpeg" alt=""><br><img src="showcase.jpeg" alt="DOM 结构"><br><img src="showcase3.jpeg" alt="CSS 样式"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们有的时候想查看 Video/Audio 之类的原生控件里面有哪些 DOM 结构或者 CSS 是怎么写的，但是审核元素的时候却看不到里面的结构，那么有没有什么办法看到呢？Chrome 为我们提供了开关 Settings|Preferences -&amp;gt; Elements -&amp;gt; Show user agent shadow DOM，开启之后就能看到隐藏 DOM 了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>好用的 shell 命令合集</title>
    <link href="http://dawei.lv/2018/06/27/%E5%A5%BD%E7%94%A8%E7%9A%84-shell-%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/"/>
    <id>http://dawei.lv/2018/06/27/好用的-shell-命令合集/</id>
    <published>2018-06-27T06:08:44.000Z</published>
    <updated>2018-06-27T06:32:37.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 proxy</span></span><br><span class="line"><span class="built_in">alias</span> proxy=<span class="string">'export all_proxy=socks5://127.0.0.1:1086'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消 proxy</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">'unset all_proxy'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前 ip 地址</span></span><br><span class="line"><span class="built_in">alias</span> ip=<span class="string">'ifconfig en0|grep "inet .* netmask"|cut -d " " -f 2'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>免密码 SSH 登录 Ubuntu</title>
    <link href="http://dawei.lv/2018/06/27/%E5%85%8D%E5%AF%86%E7%A0%81-SSH-%E7%99%BB%E5%BD%95-Ubuntu/"/>
    <id>http://dawei.lv/2018/06/27/免密码-SSH-登录-Ubuntu/</id>
    <published>2018-06-27T05:52:30.000Z</published>
    <updated>2018-07-22T14:48:52.693Z</updated>
    
    <content type="html"><![CDATA[<p>由于工作的原因需要经常 SSH 登录服务器，每次登录服务器都要输入一次密码非常麻烦，还好 SSH 提供了免密码登录（公钥登录），设置好之后每次只需要 <code>ssh user@example.com</code> 回车就登录上去了。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成密钥，一路回车，默认保存在 ~/.ssh/id_rsa 下</span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 上传公钥到目标服务器上</span><br><span class="line">ssh-copy-id user@example.com</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh user@example.com</span><br><span class="line"># 回车，咻，登录上了！</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于工作的原因需要经常 SSH 登录服务器，每次登录服务器都要输入一次密码非常麻烦，还好 SSH 提供了免密码登录（公钥登录），设置好之后每次只需要 &lt;code&gt;ssh user@example.com&lt;/code&gt; 回车就登录上去了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://dawei.lv/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Progressive Web App 开发指南</title>
    <link href="http://dawei.lv/2018/06/27/Progressive-Web-App-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>http://dawei.lv/2018/06/27/Progressive-Web-App-开发指南/</id>
    <published>2018-06-27T02:04:41.000Z</published>
    <updated>2018-06-27T03:51:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>施工中</p></blockquote><h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><ol><li>Service Workers 目前还没有被授予访问 cookie 的能力，via<a href="https://github.com/WICG/cookie-store/issues/37" target="_blank" rel="noopener">https://github.com/WICG/cookie-store/issues/37</a>、<a href="https://github.com/w3c/ServiceWorker/issues/707" target="_blank" rel="noopener">https://github.com/w3c/ServiceWorker/issues/707</a>、<a href="https://github.com/w3c/ServiceWorker/issues/837" target="_blank" rel="noopener">https://github.com/w3c/ServiceWorker/issues/837</a>。所以通过 session 鉴权的页面可能会出现异常。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;施工中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;坑点&quot;&gt;&lt;a href=&quot;#坑点&quot; class=&quot;headerlink&quot; title=&quot;坑点&quot;&gt;&lt;/a&gt;坑点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Service Workers 目前还没有被授予访问
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://dawei.lv/tags/javascript/"/>
    
      <category term="PWA" scheme="http://dawei.lv/tags/PWA/"/>
    
      <category term="Service Workers" scheme="http://dawei.lv/tags/Service-Workers/"/>
    
  </entry>
  
  <entry>
    <title>为你的阿里云服务器 ECS 升级 https</title>
    <link href="http://dawei.lv/2018/06/22/%E4%B8%BA%E4%BD%A0%E7%9A%84%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-ECS-%E5%8D%87%E7%BA%A7-https/"/>
    <id>http://dawei.lv/2018/06/22/为你的阿里云服务器-ECS-升级-https/</id>
    <published>2018-06-22T08:59:14.000Z</published>
    <updated>2018-06-27T02:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是<a href="https://dawei.lv/2018/06/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA-Node-js-%E7%BA%BF%E4%B8%8A%E7%8E%AF%E5%A2%83/">从零搭建-Node-js-线上环境</a>的后续，因 https 比较独立，故单独写了一篇文章记录下。</p><p>阿里云现在提供了免费的 SSL 证书，申请过程略过，很简单，审核通过后下载证书文件。</p><a id="more"></a><p>在 /etc/nginx 下新建目录 cert，将证书 xxx.pem 和 xxx.key 上传到 /etc/nginx/cert 下，修改 <code>dev.example.com.conf</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name dev.example.com;</span><br><span class="line">    access_log /var/log/nginx/dev.example.com.access.log;</span><br><span class="line">    ssl on; #开启SSL</span><br><span class="line">    ssl_certificate     cert/xxx.pem;    #证书文件</span><br><span class="line">    ssl_certificate_key cert/xxx.key;    #私钥文件</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://127.0.0.1:8888/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;        #监听80端口</span><br><span class="line">    server_name  dev.example.com; #监听的域名</span><br><span class="line">    return 301 https://dev.example.com$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test 下配置有没有问题</span></span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">service nginx reload</span><br></pre></td></tr></table></figure><p>重新访问 <code>http://dev.example.com</code> 看看是不是已经跳转到 <code>https://dev.example.com</code> 了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是&lt;a href=&quot;https://dawei.lv/2018/06/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA-Node-js-%E7%BA%BF%E4%B8%8A%E7%8E%AF%E5%A2%83/&quot;&gt;从零搭建-Node-js-线上环境&lt;/a&gt;的后续，因 https 比较独立，故单独写了一篇文章记录下。&lt;/p&gt;
&lt;p&gt;阿里云现在提供了免费的 SSL 证书，申请过程略过，很简单，审核通过后下载证书文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://dawei.lv/tags/ubuntu/"/>
    
      <category term="nginx" scheme="http://dawei.lv/tags/nginx/"/>
    
      <category term="https" scheme="http://dawei.lv/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>从零搭建 Node.js 线上环境</title>
    <link href="http://dawei.lv/2018/06/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA-Node-js-%E7%BA%BF%E4%B8%8A%E7%8E%AF%E5%A2%83/"/>
    <id>http://dawei.lv/2018/06/22/从零搭建-Node-js-线上环境/</id>
    <published>2018-06-22T03:59:47.000Z</published>
    <updated>2018-06-27T07:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文对应 Ubuntu 16.04.4 LTS (GNU/Linux 4.4.0-117-generic x86_64)</p></blockquote><h3 id="Step-1-更新-Ubuntu-源资源列表"><a href="#Step-1-更新-Ubuntu-源资源列表" class="headerlink" title="Step 1 更新 Ubuntu 源资源列表"></a>Step 1 更新 Ubuntu 源资源列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Step-2-安装-Node-js-版本管理工具-nvm"><a href="#Step-2-安装-Node-js-版本管理工具-nvm" class="headerlink" title="Step 2 安装 Node.js 版本管理工具 nvm"></a>Step 2 安装 Node.js 版本管理工具 nvm</h3><p>我们使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 作为 Node.js 的版本管理工具，它可以方便的切换 Node.js 版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure><p>看到提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">=&gt; Downloading nvm as script to <span class="string">'/root/.nvm'</span></span><br><span class="line"></span><br><span class="line">=&gt; Appending nvm <span class="built_in">source</span> string to /root/.bashrc</span><br><span class="line">=&gt; Appending bash_completion <span class="built_in">source</span> string to /root/.bashrc</span><br><span class="line">=&gt; Close and reopen your terminal to start using nvm or run the following to use it now:</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure><p>重新登录 Ubuntu。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm --version</span><br><span class="line"><span class="comment"># 显示版本号，证明安装 nvm 已经成功</span></span><br><span class="line">0.33.11</span><br></pre></td></tr></table></figure><h3 id="Step-3-安装-Node-js"><a href="#Step-3-安装-Node-js" class="headerlink" title="Step 3 安装 Node.js"></a>Step 3 安装 Node.js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出长期支持的版本</span></span><br><span class="line">nvm ls-remote --lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择安装最新的长期支持版本</span></span><br><span class="line">nvm install v8.11.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 耐心等待下载，从阿里云上下载的时候速度还是挺慢的</span></span><br><span class="line">Downloading and installing node v8.11.3...</span><br><span class="line">Downloading https://nodejs.org/dist/v8.11.3/node-v8.11.3-linux-x64.tar.xz...</span><br><span class="line"><span class="comment">######################################################################## 100.0%</span></span><br><span class="line">Computing checksum with sha256sum</span><br><span class="line">Checksums matched!</span><br><span class="line">Now using node v8.11.3 (npm v5.6.0)</span><br><span class="line">Creating default <span class="built_in">alias</span>: default -&gt; v8.11.3</span><br></pre></td></tr></table></figure><h3 id="Step-4-安装-nginx"><a href="#Step-4-安装-nginx" class="headerlink" title="Step 4 安装 nginx"></a>Step 4 安装 nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure><p>nginx 默认会被安装在 <code>/etc/nginx</code> 下。安装好之后启动 nginx，访问服务器的 ip，就会看到 nginx 的欢迎页面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">service nginx start</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">service nginx stop</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">service nginx restart</span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">service nginx reload</span><br></pre></td></tr></table></figure><h3 id="Step-5-为不同-Node-js-服务配置不同域名"><a href="#Step-5-为不同-Node-js-服务配置不同域名" class="headerlink" title="Step 5 为不同 Node.js 服务配置不同域名"></a>Step 5 为不同 Node.js 服务配置不同域名</h3><p>假设我们需要配置 <code>www.example.com</code> 指向服务器上的 <code>http://127.0.0.1:8888</code> ， <code>dev.example.com</code> 指向服务器上的 <code>http://127.0.0.1:8800</code> 。</p><p>nginx 的默认安装目录是 /etc/nginx ，我们需要在 /etc/nginx/conf.d 下新建两个文件 <code>www.example.com.conf</code>、<code>dev.example.com.conf</code>。</p><p><code>www.example.com.conf</code> 内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.example.com;</span><br><span class="line">    access_log /var/log/nginx/www.example.com.access.log;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass    http://127.0.0.1:8888/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dev.example.com.conf</code> 内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name dev.example.com;</span><br><span class="line">    access_log /var/log/nginx/dev.example.com.access.log;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://127.0.0.1:8888/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test 下配置有没有问题</span></span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">service nginx reload</span><br></pre></td></tr></table></figure><p>分别访问下 www 站和 dev 站，看看是不是已经配置好啦！</p><blockquote><p>413 Request Entity Too Large 报错解决方式：<br>在 nginx.conf 的 http {} 中添加一个 <code>client_max_body_size 50m;</code> 将上传限制为 50M</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文对应 Ubuntu 16.04.4 LTS (GNU/Linux 4.4.0-117-generic x86_64)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Step-1-更新-Ubuntu-源资源列表&quot;&gt;&lt;a href=&quot;#Step-1-更新-Ubuntu-源资源列表&quot; class=&quot;headerlink&quot; title=&quot;Step 1 更新 Ubuntu 源资源列表&quot;&gt;&lt;/a&gt;Step 1 更新 Ubuntu 源资源列表&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-get update&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://dawei.lv/tags/ubuntu/"/>
    
      <category term="nginx" scheme="http://dawei.lv/tags/nginx/"/>
    
      <category term="node.js" scheme="http://dawei.lv/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>npm 版本号主要注意的规则</title>
    <link href="http://dawei.lv/2018/06/21/npm-%E7%89%88%E6%9C%AC%E5%8F%B7%E4%B8%BB%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E8%A7%84%E5%88%99/"/>
    <id>http://dawei.lv/2018/06/21/npm-版本号主要注意的规则/</id>
    <published>2018-06-21T11:41:27.000Z</published>
    <updated>2018-06-22T02:02:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直都觉得 npm 版本号没什么好注意的，直到今天掉到坑里了，爬了一下午才爬出来，特作此文，加深印象，提醒自己。</p><a id="more"></a><p>某日，用的好好的 Webpack 突然打出来的包某个 entry 不能用了，一直报错 <code>Uncaught TypeError: Cannot read property &#39;call&#39; of undefined</code> 。代码一顿分析没找到原因，去 Webpack Issue 上搜了一把，还真有不少遇到相同问题的(<a href="https://github.com/webpack/webpack/issues/7499" target="_blank" rel="noopener">7499</a>、<a href="https://github.com/webpack/webpack/issues/7425" target="_blank" rel="noopener">7425</a>)。官方维护人员给出的反馈是暂未定位到具体原因，翻看了下面的反馈，有人指出使用 <code>4.9.2</code> 以上的版本都会有问题。</p><p>So，<code>cnpm i -D webpack@4.9.2</code> 尝试安装了 <code>4.9.2</code> 的版本，重新打包，问题不再重现，问题解决，提交新的 package.json，美滋滋。</p><p>But，还没安稳多久。同事 Kim 表示自己的项目打出来的包还是不正常。怎么会这样呢，我们俩的项目都是一样的，代码都是最新的。于是我重新打包了一次项目，没能重现。于是 <code>rm -rf node_modules</code>，重新 <code>cnpm i</code>，自信打包。</p><p>问题复现…What？！怎么会？包不都是一样的吗？笔者一顿猛删 node_modules，下载了各种 webpack 版本，各种 <code>cnpm i</code>，发现打包时好时坏，怎么回事呢？这时一道灵光闪过，会不会是 node_modules 下的包版本不一致呢？仔细对比了同事的 node_modules 发现，他的 webpack 居然是 <code>4.12.0</code> 的！为什么呢？笔者突然想起来，package.json 里面的配置是：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // ...</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    // ...</span><br><span class="line">    "webpack": "^4.9.0"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意这个 <code>^</code> ，罪魁祸首就是这个 <code>^</code>！它的含义是 <code>不低于当前版本主版本号的最新版本</code>。也就是说，如果当前 webpack 最高版本 4.12.0 ，那么你的 <code>^4.9.0</code> 会去下载 4.12.0，也就是当前的问题版本，而不是 4.9.0！这也解释了为什么我主动 <code>cnpm i -D webpack@4.9.2</code> 的时候打包正常，而删除 node_modules 重新打包就会出现问题，两种操作下下来的 webpack 版本不一致嘛！</p><p>问题定位出来后，我们修改了 package.json，在官方修复该问题之前先锁定版本号：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // ...</span><br><span class="line">    "devDependencies": &#123;</span><br><span class="line">        // ...</span><br><span class="line"><span class="deletion">-        "webpack": "^4.9.0",</span></span><br><span class="line"><span class="addition">+        "webpack": "4.9.0",</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新安装&amp;打包，问题不再重现，bug fix！</p><p>附 npmjs 官网对语义化符号的说明 <a href="https://semver.npmjs.com/" target="_blank" rel="noopener">https://semver.npmjs.com/</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直都觉得 npm 版本号没什么好注意的，直到今天掉到坑里了，爬了一下午才爬出来，特作此文，加深印象，提醒自己。&lt;/p&gt;
    
    </summary>
    
    
      <category term="npm" scheme="http://dawei.lv/tags/npm/"/>
    
      <category term="bug 定位" scheme="http://dawei.lv/tags/bug-%E5%AE%9A%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>使用 Webpack4.0 打包组件库并发布到 npm</title>
    <link href="http://dawei.lv/2018/06/08/webpack-%E6%89%93%E5%8C%85%E7%BB%84%E4%BB%B6%E5%BA%93%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0-npm/"/>
    <id>http://dawei.lv/2018/06/08/webpack-打包组件库并发布到-npm/</id>
    <published>2018-06-08T07:51:03.000Z</published>
    <updated>2018-06-22T02:01:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将会介绍如何将自己写的组件库打包成第三方库，发布到 npm 上，同时支持在原生 js / React/ Vue 下使用。Webpack4 的升级指南可以参考下 <a href="https://dawei.lv/2018/05/21/Webpack4-0-%E5%8D%87%E7%BA%A7%E9%85%8D%E7%BD%AE/">Webpack4.0 升级配置</a>，本文不做赘述。</p><a id="more"></a><h2 id="使用-Webpack4-0-打包"><a href="#使用-Webpack4-0-打包" class="headerlink" title="使用 Webpack4.0 打包"></a>使用 Webpack4.0 打包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line">exports <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello Tree'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设我们有上面的 index.js 文件，我们想要把打它打包成一个 tree.js 和一个 tree.min.js 包，并且我希望我既可以通过 <code>&lt;script src=&quot;../dist/tree.js&quot;&gt;&lt;/script&gt;</code> 直接 <code>new Tree()</code> ，又可以通过 <code>import Tree from &#39;tree&#39;</code> 或 <code>let Tree = require(&#39;tree&#39;)</code> 引入，怎么做呢？这就要使用 Webpack 来处理了。</p><p>Webpack 不仅可以打包 React / Vue 相关的项目工程，也可以单独打包 js 组件。先来看下入口与出口的配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  mode: <span class="string">"none"</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    tree: <span class="string">"./src/index.js"</span>,</span><br><span class="line">    <span class="string">"tree.min"</span>: <span class="string">"./src/index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"[name].js"</span>,</span><br><span class="line">    libraryExport: <span class="string">"default"</span>,</span><br><span class="line">    library: <span class="string">"Tree"</span>,</span><br><span class="line">    libraryTarget: <span class="string">"umd"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h4><p>Webpack4.0 会在默认情况下开启 <code>mode=production</code>，这会无差别的压缩我们的 <code>tree.js</code> 和 <code>tree.min.js</code>，这不是我们想要的，禁用它。</p><h4 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h4><p><code>entry</code> 里面我们配置两个入口 <code>tree</code>、<code>&quot;tree.min&quot;</code>，让 webpack 可以打包出两个文件，我们可以针对两个入口做不同的处理。</p><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><p><code>output</code> 的 <code>filename</code> 表示打包出来文件名叫什么。<code>libraryExport=default</code> 表示打包出来的组件直接对外暴露 <code>default</code> 属性，否则我们调用的时候需要 <code>new Tree.default()</code>，这不是我们希望的调用方式。<code>library=Tree</code> 表示对外暴露的组件叫什么，如果这个地方修改成了 <code>library=Bar</code>，那我们调用的时候就是 <code>new Bar()</code>。<code>libraryTarget=umd</code> 表示采用 UMD (Universal Module Definition) 的方式打包 js，同时支持在 CommonJS、AMD 和全局变量使用。</p><h4 id="optimization"><a href="#optimization" class="headerlink" title="optimization"></a>optimization</h4><p>怎么对 <code>tree.min.js</code> 压缩，但不对 <code>tree.js</code> 压缩呢？请看下面的配置部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">        minimize: <span class="literal">true</span>,</span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="keyword">new</span> UglifyJSPlugin(&#123;</span><br><span class="line">                include: <span class="regexp">/\.min\.js$/</span>,</span><br><span class="line">            &#125;),</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>通过 <code>include</code> 设置只压缩 <code>min.js</code> 结尾的文件，是不是很简单。这样我们就得到了 <code>dist/tree.min.js</code>、<code>dist/tree.js</code> 两个文件。下面我们开始发布代码到 npm。</p><h2 id="发布组件库到-npm-上"><a href="#发布组件库到-npm-上" class="headerlink" title="发布组件库到 npm 上"></a>发布组件库到 npm 上</h2><h4 id="发布之前"><a href="#发布之前" class="headerlink" title="发布之前"></a>发布之前</h4><p>发布之前，还有件事需要做，在项目根目录新建 <code>index.js</code>，添加内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">"production"</span>) &#123;</span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="built_in">require</span>(<span class="string">"./dist/tree.min.js"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="built_in">require</span>(<span class="string">"./dist/tree.js"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 <code>package.json</code> 的 <code>main</code> 为 <code>index.js</code>，指定我们通过 import / require 的时候入口文件位置。</p><h4 id="注册-npm"><a href="#注册-npm" class="headerlink" title="注册 npm"></a>注册 npm</h4><p>想要发布代码到 npm 上，需要先注册一个账号，你可以直接打开<a href="https://www.npmjs.com/signup" target="_blank" rel="noopener">官网注册</a>，这里我们选择更 cooooool 的方式注册。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure><p>依次输入 Username、Password、Email 完成注册。</p><h4 id="登录-npm"><a href="#登录-npm" class="headerlink" title="登录 npm"></a>登录 npm</h4><p>注册好账号之后需要在 Terminal 上登录 npm，在 Terminal 中直接注册的同学就不需用登录了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><p>输入 Username、Password、Email 完成登录。</p><h4 id="发布到-npm"><a href="#发布到-npm" class="headerlink" title="发布到 npm"></a>发布到 npm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>发布的包名就是你的 <code>package.json</code> 的 <code>name</code> 和 <code>version</code>。有冲突的话需要换一个哦。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文其实是笔者近期在开源的一个树形选择控件 <a href="https://github.com/daweilv/treejs" target="_blank" rel="noopener">@widgetjs/tree</a> 摸索出来的打包经验总结。为了简化配置，突出重点，省略了一些生产环境需要添加的较为繁琐的细节，正式的生产模式配置可以在 <a href="https://github.com/daweilv/treejs" target="_blank" rel="noopener">github</a> 上找到，也欢迎使用，多多提出意见。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将会介绍如何将自己写的组件库打包成第三方库，发布到 npm 上，同时支持在原生 js / React/ Vue 下使用。Webpack4 的升级指南可以参考下 &lt;a href=&quot;https://dawei.lv/2018/05/21/Webpack4-0-%E5%8D%87%E7%BA%A7%E9%85%8D%E7%BD%AE/&quot;&gt;Webpack4.0 升级配置&lt;/a&gt;，本文不做赘述。&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://dawei.lv/tags/webpack/"/>
    
      <category term="npm" scheme="http://dawei.lv/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>阿里云RDS数据恢复方法</title>
    <link href="http://dawei.lv/2018/05/30/%E9%98%BF%E9%87%8C%E4%BA%91RDS%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://dawei.lv/2018/05/30/阿里云RDS数据恢复方法/</id>
    <published>2018-05-30T05:05:05.000Z</published>
    <updated>2018-06-22T02:01:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>某天，公司的数据库被某运维同学用自动化脚本批量改了一批数据，并且改出问题来了，需要恢复修改的数据。由于我司采用了阿里云的云数据库 RDS，于是我登录了公司的阿里云控制台进行了恢复操作，操作过程总结如下，供需要的同学参考。</p><a id="more"></a><h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><p>依次访问菜单“云计算基础服务”&gt;“云数据库 RDS 版” &gt; “实例列表”，选择要恢复的实例 A，点击“管理”，选择“备份恢复”。可以看到 RDS 默认帮我们备份了 1 天前、4 天前、6 天前的数据。</p><h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><p>点击“克隆实例”，选择“按量付费”，还原方式选择按“备份集”，备份集选择一天前的那个备份，规格这里可以选择最低的 “1 核 1GB”，因为我们恢复完后就会释放掉这个实例，用不着选特别好的。然后点击“立即购买”。购买完成后需要等待 5 分钟左右，RDS 创建实例还是挺慢的。</p><h4 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h4><p>新的克隆实例创建好了之后，可以在“云计算基础服务”&gt;“云数据库 RDS 版”&gt;“实例列表”下看到。我们选择新创建的实例，点击“管理”，选择“登录数据库”。输入用户名和密码，点击登录。</p><h4 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h4><p>登录后就可以看到一天前的数据库的状态，这时候就根据出现的问题，具体问题具体分析，写出恢复的 SQL 语句了。</p><p>我这次恢复的过程中，发现 1 天前的那个备份也被污染了，于是我又创建了 4 天前的实例，两份数据加一起恢复了现网数据。</p><p>给运维同学提个醒，最好不要使用自动化脚本刷现网后台，出现问题危害特别大、破坏性极强、恢复困难..</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;某天，公司的数据库被某运维同学用自动化脚本批量改了一批数据，并且改出问题来了，需要恢复修改的数据。由于我司采用了阿里云的云数据库 RDS，于是我登录了公司的阿里云控制台进行了恢复操作，操作过程总结如下，供需要的同学参考。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://dawei.lv/tags/MySQL/"/>
    
      <category term="阿里云" scheme="http://dawei.lv/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="RDS" scheme="http://dawei.lv/tags/RDS/"/>
    
  </entry>
  
  <entry>
    <title>Webpack4.0 升级配置</title>
    <link href="http://dawei.lv/2018/05/21/Webpack4-0-%E5%8D%87%E7%BA%A7%E9%85%8D%E7%BD%AE/"/>
    <id>http://dawei.lv/2018/05/21/Webpack4-0-升级配置/</id>
    <published>2018-05-21T02:00:35.000Z</published>
    <updated>2018-05-30T12:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文基于 webpack 4.8.1</p></blockquote><h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>webpack 彪版本号的速度真是飞快，4.0 发布没多久上去看的时候才 4.1.*，现在已经刷到 4.8.1 了，给人一种“我版本号很高了，可以安心升级了”的感觉，然而坑依然很多…尤其是 API 文档，到处可见 3.0 的陈旧信息。<a href="https://webpack.js.org/guides/code-splitting/" target="_blank" rel="noopener">Code Splitting</a> 章节点进去依然在讲 CommonsChunkPlugin ，<a href="https://webpack.js.org/plugins/commons-chunk-plugin/" target="_blank" rel="noopener">CommonsChunkPlugin</a> 点进去提示去看 <a href="https://webpack.js.org/plugins/split-chunks-plugin/" target="_blank" rel="noopener">SplitChunksPlugin</a>，看文档的时候经常会迷失自我，心累…好了，吐槽完毕，下面是正文。需要直接复制粘贴的同学直接拉到<a href="#Demo">最后</a>~</p><a id="more"></a><h2 id="4-0-与-3-0-的区别"><a href="#4-0-与-3-0-的区别" class="headerlink" title="4.0 与 3.0 的区别"></a>4.0 与 3.0 的区别</h2><h4 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h4><p>webpack4.0 新增了 <code>mode</code> 的概念, <code>mode</code> 可以为 <code>development</code>、<code>production</code> 和 <code>none</code>。</p><p><code>development</code> 帮我们设置了 <code>process.env.NODE_ENV=development</code>，并添加了 <code>NamedModulesPlugin</code> 插件。<code>process.env.NODE_ENV=development</code> 可以用来显示一些在开发模式下才显示的 debug 信息，请注意这个 <code>NODE_ENV</code> 不能在 <code>webpack.config.js</code> 中使用，只能在你的源文件中使用。想要在 <code>webpack.config.js</code> 中也生效，需要在 package.json 的 script 脚本前添加 <code>NODE_ENV=development</code>，如 <code>NODE_ENV=development webpack --config webpack.dev.js</code>。<code>NamedModulesPlugin</code> 是在开启 HMR 的时候使用的插件。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// webpack.development.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line"><span class="addition">+ mode: 'development'</span></span><br><span class="line"><span class="deletion">- plugins: [</span></span><br><span class="line"><span class="deletion">-   new webpack.NamedModulesPlugin(),</span></span><br><span class="line"><span class="deletion">-   new webpack.DefinePlugin(&#123; "process.env.NODE_ENV": JSON.stringify("development") &#125;),</span></span><br><span class="line"><span class="deletion">- ]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>production</code> 帮我们设置了 <code>process.env.NODE_ENV=production</code>，并添加了 <code>UglifyJsPlugin</code>、<code>ModuleConcatenationPlugin</code>、<code>NoEmitOnErrorsPlugin</code> 等插件，在设置了 <code>sideEffects=false</code> 之后可以实现未引用代码删除的功能。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// webpack.production.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line"><span class="addition">+  mode: 'production',</span></span><br><span class="line"><span class="deletion">-  plugins: [</span></span><br><span class="line"><span class="deletion">-    new UglifyJsPlugin(/* ... */),</span></span><br><span class="line"><span class="deletion">-    new webpack.DefinePlugin(&#123; "process.env.NODE_ENV": JSON.stringify("production") &#125;),</span></span><br><span class="line"><span class="deletion">-    new webpack.optimize.ModuleConcatenationPlugin(),</span></span><br><span class="line"><span class="deletion">-    new webpack.NoEmitOnErrorsPlugin()</span></span><br><span class="line"><span class="deletion">-  ]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="optimization"><a href="#optimization" class="headerlink" title="optimization"></a>optimization</h4><p>另一个区别在于引入了 <code>optimization</code> 的概念，<code>optimization.minimizer</code> 和 <code>optimization.splitChunks</code> 是需要我们关注的两个配置。</p><p><code>optimization.minimizer</code> 用于指定 webpack 使用哪个代码压缩插件，默认为 <code>new webpack.optimize.UglifyJsPlugin</code>，推荐更换为 <code>UglifyJSPlugin</code>。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+const UglifyJSPlugin = require('uglifyjs-webpack-plugin');</span></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  //...</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line"><span class="deletion">-     new webpack.optimize.UglifyJsPlugin(&#123;&#125;)</span></span><br><span class="line"><span class="addition">+     new UglifyJSPlugin(&#123;&#125;)</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>optimization.splitChunks</code> 替代了 3.0 的 CommonsChunkPlugin，实现公共代码抽取。具体 API 参见<a href="https://webpack.js.org/plugins/split-chunks-plugin/" target="_blank" rel="noopener">SplitChunksPlugin</a>。划几个重点，webpack 生成已经给大部分用户提供了默认的设置，<code>mode=production</code> 就已经带了这个优化，BUT!! 默认开启的代码分割只对异步加载的代码有效，也就是如果你是多个入口的配置，那么你的 react、react-dom、react-router 等公共库以及你的 common 代码都会被重复打包进多个入口里。emmmmm，这叫什么开箱即用嘛，还是我们自己动手吧。</p><p>首先，<code>optimization.splitChunks.chunks</code> 设置为 <code>all</code>，使得 <code>async</code> 异步加载的代码和 <code>initial</code> 初始化的代码都会被抽取。<code>optimization.splitChunks.cacheGroups</code> 添加 <code>commons</code> 和 <code>vendors</code> （如下）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">"all"</span>,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        commons: &#123;</span><br><span class="line">          name: <span class="string">"commons"</span>,</span><br><span class="line">          test: <span class="regexp">/src[\/]/</span>,</span><br><span class="line">          chunks: <span class="string">"initial"</span>,</span><br><span class="line">          priority: <span class="number">2</span>,</span><br><span class="line">          minChunks: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          name: <span class="string">"vendors"</span>,</span><br><span class="line">          test: <span class="regexp">/node_modules/</span>,</span><br><span class="line">          chunks: <span class="string">"initial"</span>,</span><br><span class="line">          priority: <span class="number">10</span>,</span><br><span class="line">          minChunks: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里的 <code>name</code> 指定你要抽取出来的 js 的文件名，<code>test</code> 字段用来筛选你要匹配的代码，<code>minChunks:2</code> 表示代码被引用 2 次及以上就会被抽取出来，<code>commons</code> 实现抽取你的 <code>src</code> 文件夹下的公共代码，<code>vendors</code> 则用于抽取 node_modules 下的公共库。下面我们需要把我们抽取出来的 <code>commons.js</code> 和 <code>vendors.js</code> 添加到 HtmlWebpackPlugin ，以实现打包出来的 html 文件引用 <code>commons.js</code> 和 <code>vendors.js</code>。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new HtmlWebpackPlugin(&#123;</span><br><span class="line">    //...</span><br><span class="line"><span class="deletion">-   chunks: 'index',</span></span><br><span class="line"><span class="addition">+   chunks: ['vendors', 'commons', 'index'],</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>到笔者发布文章为止，HtmlWebpackPlugin 还不支持添加动态名称的 cacheGroups，无法将未明确指定 name 的 vendors~chunk-a~chunk-b.js 之类的 js 打包进代码中，不过可以看到<a href="https://github.com/jantimon/html-webpack-plugin/pull/945" target="_blank" rel="noopener">相关的代码</a>已经快要出来了。之后就可以实现更精细的代码分割打包了。</p></blockquote><h4 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h4><p>使用 <a href="https://github.com/webpack-contrib/mini-css-extract-plugin" target="_blank" rel="noopener">mini-css-extract-plugin</a> 替代 <code>extract-text-webpack-plugin</code>抽取 css 到单独文件中，使用 <a href="https://github.com/NMFR/optimize-css-assets-webpack-plugin" target="_blank" rel="noopener">optimize-css-assets-webpack-plugin</a> 对 css 进行压缩处理。</p><p><code>optimize-css-assets-webpack-plugin</code> 在使用的时候强烈推荐设置 <code>isSafe = true</code>，避免 z-index 被修改的<a href="https://github.com/NMFR/optimize-css-assets-webpack-plugin/issues/28" target="_blank" rel="noopener">问题</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;</span><br><span class="line">  cssProcessorOptions: &#123;</span><br><span class="line">    isSafe: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><a href="https://github.com/daweilv/webpack4-demo" target="_blank" rel="noopener">webpack4-demo</a> 是笔者整理的 webpack4.0 demo，详细的 webpack 配置可以在这里找到。</p><ol><li>支持开发/生产模式</li><li>支持开发模式下 HMR</li><li>支持代码分割、代码混淆压缩</li><li>支持未引用代码删除</li><li>支持 less、autoprefixer</li><li>支持单/多入口</li><li>支持查看打包各个模块占用大小</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文基于 webpack 4.8.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;吐槽&quot;&gt;&lt;a href=&quot;#吐槽&quot; class=&quot;headerlink&quot; title=&quot;吐槽&quot;&gt;&lt;/a&gt;吐槽&lt;/h2&gt;&lt;p&gt;webpack 彪版本号的速度真是飞快，4.0 发布没多久上去看的时候才 4.1.*，现在已经刷到 4.8.1 了，给人一种“我版本号很高了，可以安心升级了”的感觉，然而坑依然很多…尤其是 API 文档，到处可见 3.0 的陈旧信息。&lt;a href=&quot;https://webpack.js.org/guides/code-splitting/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Code Splitting&lt;/a&gt; 章节点进去依然在讲 CommonsChunkPlugin ，&lt;a href=&quot;https://webpack.js.org/plugins/commons-chunk-plugin/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CommonsChunkPlugin&lt;/a&gt; 点进去提示去看 &lt;a href=&quot;https://webpack.js.org/plugins/split-chunks-plugin/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SplitChunksPlugin&lt;/a&gt;，看文档的时候经常会迷失自我，心累…好了，吐槽完毕，下面是正文。需要直接复制粘贴的同学直接拉到&lt;a href=&quot;#Demo&quot;&gt;最后&lt;/a&gt;~&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://dawei.lv/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>在 Terminal 中打开 Sublime</title>
    <link href="http://dawei.lv/2017/05/04/%E5%9C%A8-Terminal-%E4%B8%AD%E6%89%93%E5%BC%80-Sublime/"/>
    <id>http://dawei.lv/2017/05/04/在-Terminal-中打开-Sublime/</id>
    <published>2017-05-04T01:49:08.000Z</published>
    <updated>2018-05-30T06:07:19.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open  ~/.bash_profile</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> sb=<span class="string">"open -a /Applications/Sublime\ Text.app"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p><code>sb.</code> 打开当前文件夹<br><code>sb file</code> 打开当前已存在文件或文件夹</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="shell" scheme="http://dawei.lv/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>javascript audio 对象常用事件</title>
    <link href="http://dawei.lv/2017/04/25/javascript-audio-%E5%AF%B9%E8%B1%A1%E5%B8%B8%E7%94%A8%E4%BA%8B%E4%BB%B6/"/>
    <id>http://dawei.lv/2017/04/25/javascript-audio-对象常用事件/</id>
    <published>2017-04-25T14:56:19.000Z</published>
    <updated>2018-05-30T06:07:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个媒体播放器，集成了图片+音频播放模式和视频播放模式，研究了下 js audio 对象的事件，整理了相关事件及触发顺序。</p><p>音频的初始加载事件顺序：依次触发 <code>onloadstart</code>、<code>onprogress</code>、<code>onsuspend</code>，然后 <code>onprogress</code>、<code>onsuspend</code> 交替触发，直到触发 <code>ondurationchange</code>、<code>onloadedmetadata</code>、<code>onloadeddata</code>、<code>oncanplay</code>、<code>oncanplaythrough</code>，加载完成。</p><p>点击播放后触发事件顺序：<br><code>onplay</code>、<code>onplaying</code>、<code>ontimeupdate</code>，播放控件开始缓冲部分音频文件<code>onprogress</code>，缓冲足够多的音频片段后触发<code>onsuspend</code>，当缓冲即将播放完后又触发<code>onprogress</code>、<code>onsuspend</code>，依次循环直到音频全部缓冲完毕。</p><p>音频播放完毕后触发：<br><code>onpause</code>、<code>onended</code></p><p>暂停播放控件时触发：<br><code>onpause</code></p><p>从暂停恢复播放后触发：<br><code>onplay</code>、<code>onplaying</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做一个媒体播放器，集成了图片+音频播放模式和视频播放模式，研究了下 js audio 对象的事件，整理了相关事件及触发顺序。&lt;/p&gt;
&lt;p&gt;音频的初始加载事件顺序：依次触发 &lt;code&gt;onloadstart&lt;/code&gt;、&lt;code&gt;onprogress&lt;/code
      
    
    </summary>
    
    
      <category term="js" scheme="http://dawei.lv/tags/js/"/>
    
      <category term="html5" scheme="http://dawei.lv/tags/html5/"/>
    
      <category term="audio" scheme="http://dawei.lv/tags/audio/"/>
    
  </entry>
  
  <entry>
    <title>前端基础拾遗</title>
    <link href="http://dawei.lv/2017/01/01/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%8B%BE%E9%81%97/"/>
    <id>http://dawei.lv/2017/01/01/前端基础拾遗/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2018-07-20T08:15:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><ol><li>DOCTYPE 作用<br>DTD（文档类型定义）是一组机器可读的规则，他定义 XML 或 HTML 的特定版本中允许有什么，不允许有什么。而 DOCTYPE 是用来描述使用哪个 DTD，保证网页以标准模式渲染，一个不含任何 DOCTYPE 的网页将会以 怪异(quirks) 模式渲染。HTML5 之前的 HTML 基于 SGML(Standard Generalized Markup Language, 标准通用标记语言)标准，需要 DTD 来保证在标准模式下渲染。HTML5 只需要 DOCTYPE 就可以保证在标准模式下渲染。</li></ol><a id="more"></a><ol start="2"><li><p>浏览器解析 HTML 方式<br>标准模式、怪异模式和部分怪异（近乎标准）模式。在标准模式中，浏览器根据规范显示页面；在混杂模式中，页面以一种比较宽松的向后兼容的方式显示。那些基于 Mozilla 的 Gecko 渲染引擎的，或者 Internet Explorer 8 在 strict mode 下，除了在处理表格的方式上有细微差异外，与标准模式相同。</p></li><li><p>行内元素与块级元素对比<br>内容上，<br>一般情况下，行内元素只能包含数据和其他行内元素。而块级元素可以包含行内元素和其他块级元素。这种结构上的包含继承区别可以使块级元素创建比行内元素更”大型“的结构。<br>格式上，<br>默认情况下，行内元素不会以新行开始，而块级元素会新起一行。</p></li><li><p>行内元素列表<br>一个行内元素只占据它对应标签的边框所包含的空间。<br>b, big, i, small, tt<br>abbr, acronym, cite, code, dfn, em, kbd, strong, samp, var<br>a, bdo, br, img, map, object, q, script, span, sub, sup<br>button, input, label, select, textarea</p></li><li><p>块级元素列表<br>块级元素占据其父元素（容器）的整个空间，因此创建了一个“块”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;address&gt; 联系方式信息</span><br><span class="line">&lt;article&gt; HTML5 文章内容</span><br><span class="line">&lt;aside&gt; HTML5 伴随内容</span><br><span class="line">&lt;audio&gt; HTML5 音频播放</span><br><span class="line">&lt;blockquote&gt; 块引用</span><br><span class="line">&lt;canvas&gt; HTML5 绘制图形</span><br><span class="line">&lt;dd&gt; 定义列表中定义条目描述</span><br><span class="line">&lt;div&gt; 文档分区</span><br><span class="line">&lt;dl&gt; 定义列表</span><br><span class="line">&lt;fieldset&gt; 表单元素分组</span><br><span class="line">&lt;figcaption&gt; HTML5 图文信息组标题</span><br><span class="line">&lt;figure&gt; HTML5 图文信息组</span><br><span class="line">&lt;footer&gt; HTML5 区段尾或页尾</span><br><span class="line">&lt;form&gt; 表单</span><br><span class="line">&lt;h1&gt; , &lt;h2&gt; , &lt;h3&gt; , &lt;h4&gt; , &lt;h5&gt; , &lt;h6&gt; 标题级别 1-6.</span><br><span class="line">&lt;header&gt; HTML5 区段头或页头</span><br><span class="line">&lt;hgroup&gt; HTML5 标题组</span><br><span class="line">&lt;hr&gt; 水平分割线</span><br><span class="line">&lt;noscript&gt; 不支持脚本或禁用脚本时显示的内容</span><br><span class="line">&lt;ol&gt; 有序列表</span><br><span class="line">&lt;output&gt; HTML5 表单输出</span><br><span class="line">&lt;p&gt; 行</span><br><span class="line">&lt;pre&gt; 预格式化文本</span><br><span class="line">&lt;section&gt; HTML5 一个页面区段</span><br><span class="line">&lt;table&gt; 表格</span><br><span class="line">&lt;tfoot&gt; 表脚注</span><br><span class="line">&lt;ul&gt; 无序列表</span><br><span class="line">&lt;video&gt; HTML5 视频</span><br></pre></td></tr></table></figure></li><li><p>常见的浏览器内核有哪些？<br>Trident：主要有 IE 浏览器以及多核浏览器<br>Gecko：主要有 Firefox 以及 Firefox 的衍生浏览器<br>WebKit：主要有 Chrome 与 Chrome 的衍生浏览器、Safari 以及多核浏览器<br>Presto：之前主要应用于 Opera，不过现在的 Opera 使用 WebKit 内核<br>EdgeHTML：Microsoft Edge，Trident 的一个分支，移除所有旧版 Internet Explorer 遗留下来的代码，并重写主要的代码以和其他现代浏览器的设计精神互通有无</p></li><li><p>HTML 语义化<br>在程序中, 语义指的是一段代码的含义 — 例如 “这个 HTML 的元素有什么作用，扮演了什么样的角色”。<br>对开发人员及团队，有利于增加代码可读性，减少差异化；<br>对搜索引擎，有助于爬虫抓取更多的有效信息，有利于确定上下文和各个关键字的权重，利于 SEO；<br>对浏览器，即使在 CSS 加载异常的情况下，也能提供一个基础的默认文档样式，方便屏幕阅读器以更有意义的方式渲染。</p></li><li><p>不同 TAB 页下通讯</p><ul><li><p>BroadcastChannel，Chrome54、Firefox38 Support</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tab1</span></span><br><span class="line"><span class="keyword">const</span> channel = <span class="keyword">new</span> BroadcastChannel(<span class="string">"channel-name"</span>);</span><br><span class="line">channel.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tab2</span></span><br><span class="line"><span class="keyword">const</span> channel = <span class="keyword">new</span> BroadcastChannel(<span class="string">"channel-name"</span>);</span><br><span class="line">channel.postMessage(<span class="string">"some message"</span>);</span><br></pre></td></tr></table></figure></li><li><p>Shared Workers，Chrome、Firefox29 Support</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// work.js</span></span><br><span class="line"><span class="keyword">const</span> connections = [];</span><br><span class="line">onconnect = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> port = e.ports[<span class="number">0</span>];</span><br><span class="line">  connections.push(port);</span><br><span class="line">  port.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    connections.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">connection</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (connection !== port) &#123;</span><br><span class="line">        connection.postMessage(e.data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tab1</span></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> SharedWorker(<span class="string">"worker.js"</span>);</span><br><span class="line">worker.port.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tab2</span></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> SharedWorker(<span class="string">"worker.js"</span>);</span><br><span class="line">worker.port.postMessage(<span class="string">"hello tab1"</span>);</span><br></pre></td></tr></table></figure></li><li><p>localStorage</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tab1</span></span><br><span class="line"><span class="built_in">window</span>.onstorage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tab2</span></span><br><span class="line">localStorage.setItem(<span class="string">"key"</span>, <span class="string">"value"</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>渲染原理</p></li><li><p>HTTP 超文本传输协议（HyperText Transfer Protocol）</p></li><li><p>HTTP2</p></li><li><p>iframe 优缺点<br>优点：<br>样式隔离，内外样式不会冲突；低改动成本接入其他模块功能；无刷新文件上传；实现长连接，作为 Websocket 不支持浏览器的替代方案<br>缺点：<br>iframe 会阻塞主页面的 onload 事件；搜索引擎的检索程序无法解读这种页面，不利于 SEO；iframe 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</p></li><li><p>Websocket 替代方案</p></li><li><p>DOM BOM 区别<br>DOM 全称是 Document Object Model，也就是文档对象模型，用来操作 HTML 中的元素。例如：<code>document.body</code>、<code>document.getElementById(&#39;someid&#39;)</code>、<code>document.title = &#39;Welcome&#39;</code>。</p><p>BOM 是 Browser Object Model，浏览器对象模型，用来控制浏览器的行为。例如，<code>location.href = &quot;http://www.xxxx.com&quot;</code>、<code>window.reload</code>。</p></li><li><p>DOM1/DOM2/DOM3 区别<br>DOM1 级主要定义了 HTML 和 XML 文档的底层结构。在 DOM1 中，DOM 由两个模块组成：DOM Core（DOM 核心）和 DOM HTML。其中，DOM Core 规定了基于 XML 的文档结构标准，通过这个标准简化了对文档中任意部分的访问和操作。DOM HTML 则在 DOM 核心的基础上加以扩展，添加了针对 HTML 的对象和方法，如：JavaScript 中的 Document 对象.</p><p>在 DOM1 的基础上 DOM2 引入了更多的交互能力，也支持了更高级的 XML 特性。DOM2 将 DOM 分为更多具有联系的模块。DOM2 级在原来 DOM 的基础上又扩充了鼠标、用户界面事件、范围、遍历等细分模块，而且通过对象接口增加了对 CSS 的支持。DOM1 级中的 DOM 核心模块也经过扩展开始支持 XML 命名空间。</p><p>DOM3 进一步扩展了 DOM，引入了以统一方式加载和保存文档的方法，它在 DOM Load And Save 这个模块中定义；同时新增了验证文档的方法，是在 DOM Validation 这个模块中定义的。</p></li><li><p>addEventListener、attachEvent、on 区别<br>attachEvent 是 IE8- 添加事件的方法，onclick 会覆盖掉之前绑定的事件，addEventListener 以事件数组的形式添加事件监听，不会覆盖掉之前的事件监听。<a href="https://stackoverflow.com/questions/2657182/correct-usage-of-addeventlistener-attachevent" target="_blank" rel="noopener">1</a>,<a href="https://stackoverflow.com/questions/30914727/what-is-the-difference-between-addeventlistener-and-attachevent" target="_blank" rel="noopener">2</a></p></li><li><p>浏览器前进/后退缓存（Backward/Forward Cache，BF Cache）<br><a href="https://harttle.land/2017/03/12/backward-forward-cache.html" target="_blank" rel="noopener">https://harttle.land/2017/03/12/backward-forward-cache.html</a><br><a href="https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Working_with_BFCache" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Working_with_BFCache</a></p></li><li><p>事件的传播机制 <a href="https://www.w3.org/TR/uievents/" target="_blank" rel="noopener">w3c</a><br><img src="eventflow.svg" alt="eventflow"><br>三个阶段：首先进入捕获阶段 <code>Window</code> -&gt;<code>Document</code>-&gt;<code>&lt;html&gt;</code>-&gt;<code>&lt;body&gt;</code>，直到达到目标元素，再进入冒泡阶段，从目标元素反向沿着捕获路径回到 <code>Window</code>。</p></li><li><p>parentNode 和 parentElement 的区别<br>在大部分情况下 <code>parentElement === parentNode</code>，只有在 parentNode 不是 html element 的时候，parentElement = null。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.parentNode; <span class="comment">// the &lt;html&gt; element</span></span><br><span class="line"><span class="built_in">document</span>.body.parentElement; <span class="comment">// the &lt;html&gt; element</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.documentElement.parentNode; <span class="comment">// the document node</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.parentElement; <span class="comment">// null</span></span><br></pre></td></tr></table></figure></li><li><p>children(HTMLCollection) 和 childNodes(NodeList) 的区别<br>childNodes 比 children 多包含了几个 <code>text</code> 节点，children 只有 html element。<br>如下图，<code>children[0] === childNodes[1]</code>。<br><img src="./childNodes-vs-children.png" alt="childNodes-vs-children"></p></li></ol><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ol><li><p>盒子模型<br>CSS 中的每个元素都被表示为一个矩形的盒子，每个盒子有四个边：content edge, padding edge, border edge, and margin edge。<br>box-sizing： content-box(默认)，border-box ，padding-box(deprecated)。<br>content-box 下盒子实际宽度不等于 width，不包括 padding 和 border 部分，布局计算不方便。border-box 下盒子实际宽度与 width 相等。</p></li><li><p>外边距合并(Margin collapsing)<br>块级元素的上外边距和下外边距有时会合并（或折叠）为一个外边距，其大小取其中的最大者，这种行为称为外边距折叠（margin collapsing），有时也翻译为外边距合并。<br>浮动元素和绝对定位元素的外边距不会折叠。</p><p>上外边距和下外边距在没有 content、padding、border 间隔的情况下相遇，就会发生外边距合并，为其中一个元素添加 content、padding、border 使得上下外边距分离，即可取消叠加。</p><p>可能发生外边距合并的三种基本情况：<br>相邻元素之间、父元素与其第一个或最后一个子元素之间、空的块级元素。</p><p>注意：</p><ul><li>上述情况的组合会产生更复杂的外边距折叠。</li><li>即使某一外边距为 0，这些规则仍然适用。因此就算父元素的外边距是 0，第一个或最后一个子元素的外边距仍然会“溢出”到父元素的外面，并且使父元素产生边距效果。</li><li>如果参与折叠的外边距中包含负值，折叠后的外边距的值为最大的正边距与最小的负边距（即绝对值最大的负边距）的和。</li><li>如果所有参与折叠的外边距都为负，折叠后的外边距的值为最小的负边距的值。这一规则适用于相邻元素和嵌套元素。</li></ul></li><li><p>浮动 float<br>将一个元素放置在 container 的左侧或右侧，允许 text 和 inline 元素环绕它。<code>float</code> 使用块布局，在某些情况下会修改 <code>display</code> 的计算值，inline -&gt; block, inline-block -&gt; block, inline-table -&gt; table, table-cell -&gt; block。对 flex/inline-flex 无效。举个 🌰 <a href="/demo/float">float</a></p></li><li><p>清除浮动<br>清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。</p><p>clear</p><ul><li>left: 元素被向下移动用于清除之前的左浮动。</li><li>right: 元素被向下移动用于清除之前的右浮动。</li><li>both: 元素被向下移动用于清除之前的左右浮动。</li></ul><p>举个 🌰 <a href="/demo/clearfix">clearfix</a>、<a href="/demo/multi-float-clearfix">multi-float-clearfix</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container1</span> &#123;</span><br><span class="line">  <span class="comment">/* overflow: hidden 亦可，各有优缺点  */</span></span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container2</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container3</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container4</span> &#123;</span><br><span class="line">  <span class="comment">/* 类似 hardcode */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container5</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.container5</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container5</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container5</span> &#123;</span><br><span class="line">  <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container6</span> &#123;</span><br><span class="line">  <span class="comment">/* 父元素浮动也可清除浮动，有副作用 */</span></span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container container1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container container2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container container3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container container4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container container5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container container6"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>块格式化上下文（Block Formatting Context，BFC）<br>浮动元素和绝对定位元素，非块级盒子的块级容器（例如，inline-block、table-cells 和 table-captions），以及 overflow 值不为 visiable 的块级盒子，都会为他们的内容创建新的 BFC（块级格式上下文）。</p><p>在 BFC 中，盒子从顶端开始垂直地一个接一个地排列，两个盒子之间的垂直的间隙是由他们的 margin 值所决定的。在一个 BFC 中，两个相邻的块级盒子的垂直外边距会产生折叠。</p><p>在 BFC 中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘（border-left）。对于从右到左的格式来说，则触碰到右边缘。</p><blockquote><p>BFC 中的元素的布局是不受外界的影响（我们往往利用这个特性来消除浮动元素对其非浮动的兄弟元素和其子元素带来的影响。）并且在一个 BFC 中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。</p></blockquote></li><li><p>动画实现<br>css 实现动画与 js 不同，css 是定义关键帧，js 则是定义渲染页面与运行时间差的关系。</p><ul><li>css 实现 <a href="https://codepen.io/daweilv/pen/ERqeVa" target="_blank" rel="noopener">demo</a></li><li>setTimeout 实现 <a href="https://codepen.io/daweilv/pen/xJKKva" target="_blank" rel="noopener">demo</a></li><li>requestAnimationFrame 实现 <a href="https://codepen.io/daweilv/pen/zLOYoJ" target="_blank" rel="noopener">demo</a></li></ul></li><li><p>选择器<br>选择器的特殊性分成 4 个权重等级：</p><ul><li>行内样式 +1000</li><li>id 选择器 +100</li><li>类、伪类、属性选择器 +10</li><li>类型、伪元素选择器 +1</li></ul></li><li><p>居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// flex 算是最优解，指哪打哪，特别方便</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// block 元素 margin</span><br><span class="line"><span class="selector-class">.block-ele</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// inline 元素 text-align</span><br><span class="line"><span class="selector-class">.inline-ele</span> &#123;</span><br><span class="line">  <span class="attribute">text-algin</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 知道宽高的情况下</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 不知道宽高的情况下</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>css 单位</p><ul><li>rem<br>html 元素的 font-size * 当前元素的 rem = 当前元素的 px，响应式布局利器</li><li>em<br>根据自身的 font-size * 当前元素的 em = 当前元素的 px，按钮根据文字的大小设置对应比例的 padding 比较好用</li><li>vh<br>1/100 的视口高度，满屏布局的时候比较好用</li><li>vw<br>1/100 的视口高度</li><li>vmin / vmax<br>vh 和 vw 依据于视口的高度和宽度，相对的，vmin 和 vmax 则关于视口高度和宽度两者的最小或者最大值。</li><li>ex<br>小写 x 的高度</li><li>ch<br>和数字 0 的宽度</li></ul></li><li><p>响应式布局<br><a href="/2018/07/12/基于媒体查询和-rem-的响应式布局实践/">基于媒体查询和 rem 的响应式布局实践</a></p></li><li><p>flex<br><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">a-guide-to-flexbox</a></p></li><li><p>grid<br><a href="https://css-tricks.com/snippets/css/complete-guide-grid/" target="_blank" rel="noopener">complete-guide-grid</a></p></li><li><p>meta</p></li><li><p>浏览器引擎前缀</p><ol><li>CSS 前缀 Edit<br>主流浏览器引擎前缀:<br>-webkit- (谷歌, Safari, 新版 Opera 浏览器等)<br>-moz- (火狐浏览器)<br>-o- (旧版 Opera 浏览器等)<br>-ms- (IE 浏览器 和 Edge 浏览器)</li><li>API 接口前缀<br>WebKit (谷歌, Safari, 新版 Opera 浏览器等)<br>Moz (火狐浏览器)<br>O (旧版 Opera 浏览器等)<br>MS (IE 浏览器 和 Edge 浏览器)</li><li>API 属性和方法前缀<br>webkit (谷歌, Safari, 新版 Opera 浏览器等)<br>moz (火狐浏览器)<br>o (旧版 Opera 浏览器等)<br>ms (IE 浏览器 和 Edge 浏览器)</li></ol></li><li><p>页面导入样式时，使用 <code>&lt;link&gt;</code> 和 <code>@import</code> 有什么区别？<br><code>@import</code> 是 CSS 加载样式的方式， <code>&lt;link&gt;</code> 是 HTML 加载样式的方式。页面被加载的时，<code>&lt;link&gt;</code> 会同时被加载，而 <code>@import</code> 引用的 CSS 会等到页面被加载完再加载。</p></li><li><p>tips 碰撞检测</p></li><li><p>圣杯布局</p><ul><li><a href="https://codepen.io/daweilv/pen/jpboqY/" target="_blank" rel="noopener">float 实现</a></li><li><a href="https://codepen.io/daweilv/pen/YjyMQg" target="_blank" rel="noopener">Flex 实现</a></li></ul><blockquote><p>float 实现真是被 Flex 爆的体无完肤，flex 实现 css 语义清晰，float 满满的黑科技糅杂在一起。</p></blockquote></li><li><p>MouseEvent offsetX/Y, pageX/Y, clientX/Y, screenX/Y<br><img src="./mouse.png" alt="mouse"></p></li></ol><h3 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h3><ol><li><p>基本类型</p></li><li><p>继承实现</p></li><li><p>macrotask 和 microtask<br><a href="https://juejin.im/entry/58d4df3b5c497d0057eb99ff" target="_blank" rel="noopener">https://juejin.im/entry/58d4df3b5c497d0057eb99ff</a><br><a href="https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context#" target="_blank" rel="noopener">https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context#</a></p></li><li><p>原型<br><code>Function.prototype</code>和<code>Function.__proto__</code>都指向<code>Function.prototype</code>，这就是鸡和蛋的问题怎么出现的。<br><code>Object.prototype.__proto__ === null</code>，说明原型链到<code>Object.prototype</code>终止。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> F();</span><br><span class="line"><span class="built_in">console</span>.log(f.__proto__ === F.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(F.prototype.constructor === F);</span><br><span class="line"><span class="built_in">console</span>.log(f.constructor === F);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(F.__proto__ === <span class="built_in">Function</span>.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype.constructor === <span class="built_in">Function</span>);</span><br><span class="line"><span class="built_in">console</span>.log(F.constructor === <span class="built_in">Function</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype.constructor === <span class="built_in">Function</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f.prototype === <span class="literal">undefined</span>);</span><br><span class="line"><span class="built_in">console</span>.log(F.prototype.__proto__ === <span class="built_in">Object</span>.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>);</span><br></pre></td></tr></table></figure></li><li><p>依赖</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;DOCTYPE 作用&lt;br&gt;DTD（文档类型定义）是一组机器可读的规则，他定义 XML 或 HTML 的特定版本中允许有什么，不允许有什么。而 DOCTYPE 是用来描述使用哪个 DTD，保证网页以标准模式渲染，一个不含任何 DOCTYPE 的网页将会以 怪异(quirks) 模式渲染。HTML5 之前的 HTML 基于 SGML(Standard Generalized Markup Language, 标准通用标记语言)标准，需要 DTD 来保证在标准模式下渲染。HTML5 只需要 DOCTYPE 就可以保证在标准模式下渲染。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://dawei.lv/tags/javascript/"/>
    
      <category term="HTML" scheme="http://dawei.lv/tags/HTML/"/>
    
      <category term="CSS" scheme="http://dawei.lv/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>javascript 正则表达式的那些坑</title>
    <link href="http://dawei.lv/2016/12/09/javascript-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <id>http://dawei.lv/2016/12/09/javascript-正则表达式的那些坑/</id>
    <published>2016-12-09T02:51:29.000Z</published>
    <updated>2018-05-30T06:07:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>js 正则，匹配多行的<br><code>[.\n]</code> 不能拿来匹配多行， <code>[]</code> 里的 <code>.</code> 会被解析成<code>标点符号</code>，而不是任意字符</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js 正则，匹配多行的&lt;br&gt;&lt;code&gt;[.\n]&lt;/code&gt; 不能拿来匹配多行， &lt;code&gt;[]&lt;/code&gt; 里的 &lt;code&gt;.&lt;/code&gt; 会被解析成&lt;code&gt;标点符号&lt;/code&gt;，而不是任意字符&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="RegExp" scheme="http://dawei.lv/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>Terminal 设置 path、alias</title>
    <link href="http://dawei.lv/2016/12/09/Terminal-%E8%AE%BE%E7%BD%AE-path%E3%80%81alias/"/>
    <id>http://dawei.lv/2016/12/09/Terminal-设置-path、alias/</id>
    <published>2016-12-09T02:48:56.000Z</published>
    <updated>2018-05-30T06:07:19.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias rn=<span class="string">'react-native'</span></span><br><span class="line">alias ro=<span class="string">'react-native run-ios'</span></span><br><span class="line">export PATH=$PATH:/usr/local/mysql/bin</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esc</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq!</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="shell" scheme="http://dawei.lv/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>vi 编辑器命令备忘</title>
    <link href="http://dawei.lv/2016/12/09/vi-%E7%BC%96%E8%BE%91%E5%99%A8%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/"/>
    <id>http://dawei.lv/2016/12/09/vi-编辑器命令备忘/</id>
    <published>2016-12-09T02:44:09.000Z</published>
    <updated>2018-05-30T06:07:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="打开一个文件"><a href="#打开一个文件" class="headerlink" title="打开一个文件"></a>打开一个文件</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vi</span>  ~/.bash_profile</span><br></pre></td></tr></table></figure><h3 id="跳到行首"><a href="#跳到行首" class="headerlink" title="跳到行首"></a>跳到行首</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="跳到行尾"><a href="#跳到行尾" class="headerlink" title="跳到行尾"></a>跳到行尾</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shift + <span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;打开一个文件&quot;&gt;&lt;a href=&quot;#打开一个文件&quot; class=&quot;headerlink&quot; title=&quot;打开一个文件&quot;&gt;&lt;/a&gt;打开一个文件&lt;/h3&gt;&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
    
      <category term="shell" scheme="http://dawei.lv/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>记一次 radio 标签 onblur 异常的分析过程</title>
    <link href="http://dawei.lv/2016/12/09/%E8%AE%B0%E4%B8%80%E6%AC%A1-radio-%E6%A0%87%E7%AD%BE-onblur-%E5%BC%82%E5%B8%B8%E7%9A%84%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/"/>
    <id>http://dawei.lv/2016/12/09/记一次-radio-标签-onblur-异常的分析过程/</id>
    <published>2016-12-09T02:30:34.000Z</published>
    <updated>2018-06-22T02:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>问题版本：Safari 10.0 (12602.1.50.0.10)</p><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>目标版本浏览器在鼠标点击 radio 的小圆点后再点击其他区域并不会触发 onblur 事件。问题可以重现，在 Chrome 下无此问题。</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">onblur</span>=<span class="string">"alert('blur')"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p>我们先找到了 w3 上关于 blur 事件的定义：<a href="https://www.w3.org/TR/uievents/#event-type-blur" target="_blank" rel="noopener">https://www.w3.org/TR/uievents/#event-type-blur</a></p><blockquote><p>A user agent MUST dispatch this event when an event target loses focus. The focus MUST be taken from the element before the dispatch of this event type. This event type is similar to focusout, but is dispatched after focus is shifted, and does not bubble.</p></blockquote><p>也就是说，onblur 事件未触发是因为该控件在此之前并没有被 focus ，所以我们在点击 radio 控件的时候监听点击事件，在点击的时候主动触发一下设置 focus</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">onblur</span>=<span class="string">"alert('blur')"</span> <span class="attr">onclick</span>=<span class="string">"this.focus()"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问题解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题版本：Safari 10.0 (12602.1.50.0.10)&lt;/p&gt;
&lt;h2 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h2&gt;&lt;p&gt;目标版本浏览器在鼠标点击 radio 的小圆点后再点击其他区域并不会触发 onblur 事件。问题可以重现，在 Chrome 下无此问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="html5" scheme="http://dawei.lv/tags/html5/"/>
    
      <category term="radio" scheme="http://dawei.lv/tags/radio/"/>
    
  </entry>
  
  <entry>
    <title>常用 MySQL 数据库语句</title>
    <link href="http://dawei.lv/2016/12/09/%E5%B8%B8%E7%94%A8-MySQL-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E5%8F%A5/"/>
    <id>http://dawei.lv/2016/12/09/常用-MySQL-数据库语句/</id>
    <published>2016-12-09T02:02:51.000Z</published>
    <updated>2018-05-30T06:08:10.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'ID'</span>,</span><br><span class="line">  <span class="string">`login`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'账号'</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`nickname`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'昵称'</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">  <span class="string">`phoneCode`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="string">'86'</span> <span class="keyword">COMMENT</span> <span class="string">'国际电话区号'</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'手机'</span>,</span><br><span class="line">  <span class="string">`create_at`</span> <span class="built_in">varchar</span>(<span class="number">24</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建日期'</span>,</span><br><span class="line">  <span class="string">`create_by`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建者'</span>,</span><br><span class="line">  <span class="string">`update_at`</span> <span class="built_in">varchar</span>(<span class="number">24</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'修改日期'</span>,</span><br><span class="line">  <span class="string">`update_by`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'修改者'</span>,</span><br><span class="line">  <span class="string">`delete_at`</span> <span class="built_in">varchar</span>(<span class="number">24</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'删除日期'</span>,</span><br><span class="line">  <span class="string">`delete_by`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'删除者'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`login`</span> (<span class="string">`login`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'用户表’;</span></span><br></pre></td></tr></table></figure><h4 id="增加字段"><a href="#增加字段" class="headerlink" title="增加字段"></a>增加字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="string">`qq`</span> <span class="built_in">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'QQ'</span>; <span class="comment">-- 增加一个 qq 字段</span></span><br></pre></td></tr></table></figure><h4 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> <span class="string">`email`</span>; <span class="comment">-- 删除一个 email 字段</span></span><br></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> <span class="string">`login`</span>; <span class="comment">-- 删除 login 索引</span></span><br></pre></td></tr></table></figure><h4 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span></span><br><span class="line"><span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> <span class="string">`nickname`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'昵称'</span>; <span class="comment">-- 修改 nickname 字段长度为 varchar(20)</span></span><br></pre></td></tr></table></figure><h4 id="修改字段名称"><a href="#修改字段名称" class="headerlink" title="修改字段名称"></a>修改字段名称</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span></span><br><span class="line"><span class="keyword">CHANGE</span> <span class="keyword">COLUMN</span> <span class="string">`phoneCode`</span> <span class="string">`phone_code`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="string">'86'</span> <span class="keyword">COMMENT</span> <span class="string">'国际电话区号'</span>; <span class="comment">-- 修改 phoneCode 字段为 phone_code</span></span><br></pre></td></tr></table></figure><h4 id="在某个字段后面插入一个字段"><a href="#在某个字段后面插入一个字段" class="headerlink" title="在某个字段后面插入一个字段"></a>在某个字段后面插入一个字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="string">`wechat`</span> <span class="built_in">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'微信'</span> <span class="keyword">AFTER</span> <span class="string">`phone`</span>; <span class="comment">-- 在 phone 字段后添加一个 wechat 字段</span></span><br></pre></td></tr></table></figure><h4 id="多条语句连起来写-中端用逗号分隔开"><a href="#多条语句连起来写-中端用逗号分隔开" class="headerlink" title="多条语句连起来写,中端用逗号分隔开"></a>多条语句连起来写,中端用逗号分隔开</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span></span><br><span class="line"><span class="keyword">CHANGE</span> <span class="keyword">COLUMN</span> <span class="string">`phoneCode`</span> <span class="string">`phone_code`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="string">'86'</span> <span class="keyword">COMMENT</span> <span class="string">'国际电话区号'</span>, <span class="comment">-- 修改 phoneCode 字段为 phone_code</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="string">`wechat`</span> <span class="built_in">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'微信'</span> <span class="keyword">AFTER</span> <span class="string">`phone`</span>; <span class="comment">-- 在 phone 字段后添加一个 wechat 字段</span></span><br></pre></td></tr></table></figure><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span>; <span class="comment">-- 删除 t_user 表</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;建表语句&quot;&gt;&lt;a href=&quot;#建表语句&quot; class=&quot;headerlink&quot; title=&quot;建表语句&quot;&gt;&lt;/a&gt;建表语句&lt;/h4&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://dawei.lv/tags/MySQL/"/>
    
  </entry>
  
</feed>
